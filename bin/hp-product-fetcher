#! /usr/bin/env ruby

# Fetches product pages from the HP website

APP_WEBSITE = "https://github.com/doga/hp-product-fetcher"
APP_VERSION = "1.0.2"
RUBY_MIN_VERSION = "2.1"

#MODE = :development
MODE = :production

OPTIONS = {
	verbose:      false,
	delay:        2,     # delay between requests, in seconds
	max_requests: nil,   # the maximum number of web requests issued from the application
	max_products: nil,   # the maximum number of product pages downloaded from the application
}
require "optparse"
OptionParser.new do |c|
	c.banner = <<END
#{$0} fetches product pages from the HP website and writes them into a directory.
As argument, this script takes one or more HP webpage URLs and a directory path.
Visit #{APP_WEBSITE} for more information.

Usage:
    #{$0} [options] hp_webpage_url... directory
END
	c.separator ""
	c.separator "Options:"
	c.on("-d", "--delay D", "Set the delay between requests, in seconds.",
		"The default value is #{OPTIONS[:delay]}.\n") do |e|
		OPTIONS[:delay] = e.to_f
	end
	c.on("-r", "--requests R", 
		"Set the maximum number of web requests that can be issued",
		"during the session.\n") do |e|
		OPTIONS[:max_requests] = e.to_i
	end
	c.on("-p", "--products P", 
		"Set the maximum number of product pages that can be downloaded",
		"during the session.\n") do |e|
		OPTIONS[:max_products] = e.to_i
	end
	c.on("-v", "--[no-]verbose", "Run verbosely.\n") do |e|
		OPTIONS[:verbose] = e
	end
	c.on("-V", "--version", "Display the current version number and exit.\n") do
		puts APP_VERSION
		exit
	end
	c.on("-h", "--help", "Display this help message and exit.\n") do
		puts c.to_s
		exit
	end
	c.separator ""
	c.separator "Usage example:"
	c.separator "    #{$0} --products 100 --verbose \\"
	c.separator "      'http://www.hp.com/country/us/en/hho/welcome.html' \\"
	c.separator "      ~/HP_data_audit/Available_HP_products"
	c.separator ""
end.parse!


if ARGV.size<2
	puts "Type `#{$0} --help` for a description of this script." 
end

require "open-uri"
require "uri"
require "pathname"

OUTPUT_DIRECTORY   = Pathname.new ARGV.pop
INPUT_WEBPAGE_URLS = ARGV
USER_AGENT         = "hp-product-fetcher/#{APP_VERSION} Ruby/#{RUBY_VERSION} #{RUBY_PLATFORM}"

class Fetcher
	def initialize
		@requests_issued = 0
		@products_downloaded = 0
		# homepage regular expressions
		@categories_block_re = /^.*<div\s+class="shopNow"[^>]*>.*?<ul>(.*?)<\/ul>.*$/
		@category_link_re =    /^.*?<a\s+href="([^"]+)"[^>]*>([^<]+)<\/a>(.*)$/
		# category page regular expressions
		@category_categoryId_re =    /'categoryId':'(\d+)'/
		@category_storeId_re =    /<input\s+type="hidden"\s+id="storeId"\s+name="storeId"\s+value="(\d+)">/
		@category_catalogId_re =    /<input\s+type="hidden"\s+id="catalogId"\s+name="catalogId"\s+value="(\d+)">/
		@category_products_page_url_re = /<a\s+href="([^"]+)"[^>]+class="[^"]*view_all[^"]+"[^>]*>/
		# product list regular expressions
		@product_re = /^.*?<a\s+href="([^"]+)"[^>]*>\s*<span\s+id="product_name_\d+"[^>]*>([^<]+)<\/span>[^<]+<\/a>(.*)$/
	end
	def download_product_pages output_directory, *homepage_urls
		downloaded_urls = []
		homepage_urls.each do |homepage_url|
			step_1_find_categories(homepage_url).each do |category|
				debug "#{category.inspect}"
				category_details = step_2_find_category_details category[:url]
				next unless category_details
				debug category_details
				products = step_3_find_products **category_details
				products.each do |product|
					next if downloaded_urls.detect do |url|
						url == product[:url]
					end
					debug product
					page = get product[:url], false
					next unless page
					@products_downloaded += 1
					downloaded_urls << product[:url]
					debug "products_downloaded: #{@products_downloaded}"
					product_dir = output_directory + product[:url].split("/").last
					product_dir.mkpath
					(product_dir + "#{product[:name].gsub("/"," ").gsub("\\"," ")}.html").write page
					exit if OPTIONS[:max_products] and @products_downloaded >= OPTIONS[:max_products]
				end
			end
		end
	end
	def to_s
		"#{@products_downloaded} product pages downloaded."
		"#{@requests_issued} web requests issued."
	end
	private
		def step_3_find_products **category_details
			# TODO: find _all_ products !!!
			log "Category products list: #{category_details[:products_list_page_url]}"
			products = []
			# product list page
			page = get category_details[:products_list_page_url]
			if page
			# 	debug page
				loop do
					match = @product_re.match page
					break unless match
					product = {
						name: match[2].chomp.strip,
						url:  "#{URI.join category_details[:products_list_page_url], match[1]}"
					}
					log "Product URL: #{product[:url]}"
					products << product
					page = match[3]
				end
			end
			# product list partials pages
			url_pattern = 'http://store.hp.com/us/en/vwa/CategoryNavigationResultsView?pageSize={pageSize}&searchTerm=&catalogId={catalogId}&categoryId={categoryId}&SkuId=&beginIndex={beginIndex}&facet=&facetLimit=&langId=-1&storeId={storeId}&excludeVisitedModelList=&visitedItemCount={beginIndex}'
			url_pattern = url_pattern.gsub '{catalogId}',  category_details[:catalogId]
			url_pattern = url_pattern.gsub '{storeId}',    category_details[:storeId]
			url_pattern = url_pattern.gsub '{categoryId}', category_details[:categoryId]
			pageSize = 30
			url_pattern = url_pattern.gsub "{pageSize}", "#{pageSize}"
			currentPageNb = 0
			loop do 
				url = url_pattern.gsub "{beginIndex}", "#{currentPageNb*pageSize+1}"
				page = get url
				break unless page
			# 	log page
				product_batch = []
				loop do
					match = @product_re.match page
					break unless match
					product = {
						name: match[2].chomp.strip,
						url:  "#{URI.join url, match[1]}"
					}
					log "Product url: #{product[:url]}"
					product_batch << product
					page = match[3]
				end
				break if product_batch.empty?
				products += product_batch
				currentPageNb+=1
			end
			products
		end
		def step_2_find_category_details category_url
			log "Category page: #{category_url}"
			page = get category_url
			return nil unless page
			match  = @category_categoryId_re.match page
			match2 = @category_storeId_re.match page
			match3 = @category_catalogId_re.match page
			match4 = @category_products_page_url_re.match page
			return nil unless match and match2 and match3 and match4
			{
				categoryId: match[1],
				storeId:    match2[1],
				catalogId:  match3[1],
				products_list_page_url: "#{URI.join category_url, match4[1]}" 
			}
		end
		def step_1_find_categories homepage_url
			log "Homepage: #{homepage_url}"
			categories=[]
			page = get homepage_url
			return categories unless page
			match = @categories_block_re.match page
			return categories unless match
			page = match[1]
			loop do
				match = @category_link_re.match page
				break unless match
				categories << {
					name: match[2].chomp.strip,
					url:  "#{URI.join homepage_url, match[1]}"
				}
				page = match[3]
			end
			categories
		end
		def get url, remove_line_breaks = true, retries = 3
			doc = ""
			succeeded = false
			1.upto retries do |i|
				break if OPTIONS[:max_requests] and @requests_issued >= OPTIONS[:max_requests]
				sleep OPTIONS[:delay]
				begin 
					log "Fetching #{url}"
					open url, "User-Agent" => USER_AGENT do |f|
					# 	raise "Error" unless f.status.first =~ /2\d\d/
						f.each_line do |line|
							line = "#{line.chomp} " if remove_line_breaks
							doc += line
						end
					end
					succeeded = true
					@requests_issued += 1
					break
				rescue Interrupt
				rescue SystemExit
					exit 500
				rescue Exception
				end 
				log "  attempt #{i} aborted"
				doc = ""
			end
			return nil unless succeeded
			doc
		end 
		def log message
			$stderr.puts "#{message}" if OPTIONS[:verbose]
		end
		def debug message
			$stderr.puts "#{message}" if MODE == :development
		end
end

Fetcher.new.download_product_pages OUTPUT_DIRECTORY, *INPUT_WEBPAGE_URLS

